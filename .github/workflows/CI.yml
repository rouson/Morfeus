name: CI

on: [push, pull_request]

env:
  CCACHE_MAXSIZE: "1G"
  CCACHE_SLOPPINESS: "time_macros"
  CI: "ON"
  CMAKE_CONFIG_TYPE: "RuntimeDebug"
  CTEST_OUTPUT_ON_FAILURE: "ON"
  HOMEBREW_DISPLAY_INSTALL_TIMES: "ON" # Benchmark Homebrew install times
  HOMEBREW_NO_ANALYTICS: "ON" # These speed up homebrew installs
  HOMEBREW_NO_AUTO_UPDATE: "ON"
  HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
  HOMEBREW_NO_GITHUB_API: "ON"
  HOMEBREW_NO_INSTALL_CLEANUP: "ON"
  LANG: "en_US.UTF-8"
  LC_ALL: "en_US.UTF-8"
  COMMON_PKG: "ccache graphviz"
  MPI_LIB: "mpich"
  BLAS_LAPACK: "openblas"
  TZ: "UTC"
  ZERO_AR_DATE: "ON"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-10.15]
        gcc: [8]

    env:
      FC: gfortran-${{ matrix.gcc }}
      CC: gcc-${{ matrix.gcc }}
      CXX: g++-${{ matrix.gcc }}
      GCC_V: ${{ matrix.gcc }}
      MPICH_FC: gfortran-${{ matrix.gcc }}
      MPICH_F90: gfortran-${{ matrix.gcc }}
      MPICH_F77: gfortran-${{ matrix.gcc }}
      MPICH_CC: gcc-${{ matrix.gcc }}
      MPICH_CXX: g++-${{ matrix.gcc }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Get everything
    - name: Get tags and branches
      shell: bash
      run: |
        git fetch --depth=1 --tags --prune origin +refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

    - name: set env
      id: set-env
      run: |
        echo "::set-env name=BUILD_DIR::${GITHUB_WORKSPACE}/build"
        echo "::set-env name=CCACHE_BASEDIR::${GITHUB_WORKSPACE}"
        echo "::set-env name=CCACHE_DIR::${HOME}/.ccache"
        echo "::set-env name=CCACHE_LOGFILE::${{ runner.temp }}/ccache/ccache.log"
        echo "::set-env name=CCACHE_TEMPDIR::${{ runner.temp }}/ccache/tmp"
        echo "::set-env name=SOURCE_DATE_EPOCH::$(git log -1 --pretty='%ct' $GITHUB_SHA)"

    - name: set outputs
      id: set-outputs
      run: |
        echo "::set-output name=build_dir::${BUILD_DIR}"
        echo "::set-output name=homedir::${HOME}"
        echo "::set-output name=ccache_cache_dir::${CCACHE_DIR}"
        echo "::set-output name=workspacedir::${GITHUB_WORKSPACE}"
        mkdir -p ${BUILD_DIR} ${CCACHE_DIR} || true

    - uses: actions/cache@v1
      name: Restore ccache
      with:
        path: ${{ steps.set-outputs.outputs.ccache_cache_dir }}
        key: ${{ matrix.os }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ matrix.os }}-ccache-

    - uses: actions/cache@v1
      name: Restore TPL cache
      with:
        path: ${{ steps.set-outputs.outputs.build_dir }}/TPLs
        key: ${{ matrix.os }}-gcc${{ matrix.gcc }}-TPLcache-${{ github.sha }}
        restore-keys: |
          ${{ matrix.os }}-gcc${{ matrix.gcc }}-TPLcache-

    - name: setup-linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -qq || true
        sudo apt-get install -y --no-install-recommends ${COMMON_PKG} ${MPI_LIB} lib${MPI_LIB}-dev lib${BLAS_LAPACK}-dev \
          apt-transport-https ca-certificates gnupg software-properties-common wget
        mpif90 -show
        mpif90 -compile_info
        mpif90 -link_info
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -
        sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
        sudo apt-get update
        sudo apt-get install kitware-archive-keyring
        sudo apt-key --keyring /etc/apt/trusted.gpg del C1F34CDD40CD72DA
        apt-cache policy cmake
        sudo apt-get install cmake=3.15.5-0kitware1
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
        --slave /usr/bin/g++ g++ /usr/bin/g++-${GCC_V} \
        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V} \
        --slave /usr/bin/gcov gcov /usr/bin/gcov-${GCC_V}
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-${GCC_V} 300
        sudo update-alternatives --set cc /usr/bin/gcc-${GCC_V}
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-${GCC_V} 300
        sudo update-alternatives --set c++ /usr/bin/g++-${GCC_V}
        sudo update-alternatives --install /usr/bin/f95 f95 /usr/bin/gfortran-${GCC_V} 300
        sudo update-alternatives --set f95 /usr/bin/gfortran-${GCC_V}
        sudo update-alternatives --install /usr/bin/f77 f77 /usr/bin/gfortran-${GCC_V} 300
        sudo update-alternatives --set f77 /usr/bin/gfortran-${GCC_V}
        echo "::add-path::/usr/lib/ccache"
        export CCACHE_TEMPDIR=/dev/shm/ccache_tmp
        echo "::set-env name=CCACHE_TEMPDIR::${CCACHE_TEMPDIR}"
        lscpu || true
        echo "::set-env name=CMAKE_BUILD_PARALLEL_LEVEL::$(nproc --all)"
        echo "::set-env name=CTEST_PARALLEL_LEVEL::$(nproc --all)"

    - name: setup-macos
      if: contains( matrix.os, 'macos')
      run: |
        mkdir -p $(brew --cache) || true
        brew install -f --force-bottle --keep-tmp ${COMMON_PKG} ${BLAS_LAPACK} || true
        brew install -f --force-bottle --keep-tmp --ignore-dependencies ${MPI_LIB} || true
        echo "::add-path::$(brew --prefix ccache)/libexec"
        echo "::set-env name=CCACHE_PATH::$(brew --prefix gcc@${GCC_V})/bin:$(brew --prefix)/bin"
        echo "::set-env name=CMAKE_BUILD_PARALLEL_LEVEL::$(sysctl -n hw.logicalcpu)"
        echo "::set-env name=CTEST_PARALLEL_LEVEL::$(sysctl -n hw.physicalcpu)"

    - name: setup-common
      run: |
        mkdir -p ${CCACHE_TEMPDIR}
        curl -s https://raw.githubusercontent.com/zbeekman/codecov-bash/gcov-fix/codecov > "${GITHUB_WORKSPACE}/codecov"
        chmod +x "${GITHUB_WORKSPACE}/codecov"
        echo "::set-env name=NCPU::${CMAKE_BUILD_PARALLEL_LEVEL}"
        ccache -s
        ccache -z

    - name: configure
      run: |
        ${CC} --version && ${FC} --version && cmake --version
        type -a ${CC} && type -a ${CXX} && type -a ${FC} && type -a cmake
        mpifort --version
        mpicc --version
        mkdir CMakeLogs
        cmake --system-information CMakeLogs/systeminfo.txt
        echo "cmake -Wdev -Wdeprecated --log-level=VERBOSE --degub-output --warn-uninitialized --graphviz=Morfeus.dot -S . -B ${BUILD_DIR}"
        cmake -Wdev -Wdeprecated --log-level=VERBOSE --degub-output --graphviz=Morfeus.dot -S . -B ${BUILD_DIR}

    - name: Collect configure logs
      run: |
        mkdir CMakeLogs/MORFEUS
        cp ${BUILD_DIR}/CMakeFiles/*.log CMakeLogs
        cp ${BUILD_DIR}/MORFEUS/CMakeFiles/*.log CMakeLogs/MORFEUS || true

    - name: upload cmake
      uses: actions/upload-artifact@v1
      with:
        name: configure_logs
        path: ./CMakeLogs
      if: always()

    - name: Build TPLs
      run: |
        cmake --build ${BUILD_DIR} --target EP_MORFEUS-configure -- -k || VERBOSE=1 cmake --build ${BUILD_DIR} --target EP_MORFEUS-configure -j 1
        ls -l ${BUILD_DIR}
        ls -l ${BUILD_DIR}/TPLs
        ls -l ${BUILD_DIR}/TPLs/src/

    - name: compile
      run: echo compile

    - name: test
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        cd ${BUILD_DIR} && echo ctest
        # find "${BUILD_DIR}" -type f -path '*/extern/*' -name '*.*.gc*' -print -exec rm {} \; || true
        # "${GITHUB_WORKSPACE}/codecov" -c \
        #   -x gcov-${GCC_V} \
        #   -p ${GITHUB_WORKSPACE} \
        #   -F unittest_tests \
        #   -G '*/test/*' \
        #   -g '*/extern/*' \
        #   -n "GHA-GCC${GCC_V}-${{ runner.os }}-unittest-tests"
        # find "${BUILD_DIR}" -type f -name '*_test.*.gc*' -print -exec rm {} \; || true
        # "${GITHUB_WORKSPACE}/codecov" -c \
        #   -x gcov-${GCC_V} \
        #   -p ${GITHUB_WORKSPACE} \
        #   -F unittest_core \
        #   -g '*/test/*' \
        #   -g '*/extern/*' \
        #   -n "GHA-GCC${GCC_V}-${{ runner.os }}-unittest-core"
        # find "${BUILD_DIR}" -name '*.*.gc*' -print -exec rm {} \; || true

    - name: Show ccache stats
      if: always()
      run: ccache -s

    - name: Cleanup TPL cache
      if: always()
      run: |
         rm -rf ${BUILD_DIR}/TPLs/src/EP_MORFEUS-stamp/*
         for stamp in build configure done install test ; do
           rm -rf ${BUILD_DIR}/TPLs/src/*-stamp/*-${stamp}
         done
         rm ${BUILD_DIR}/MORFEUS/CMakeCache.txt || true
